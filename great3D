#!/usr/bin/env python3

"""Program to compute and visualise a 3D-transcriptome map.

Take a 3D gene positions file and a gene expression matrix, compute spatial correlation and visualise an interactive 3D graph of the spatial gene expression correlation
"""

import argparse
import pandas as pd
<<<<<<< HEAD
from dash import Dash, dcc, html, dash_table
=======
import plotly.graph_objects as go
from dash import Dash, dcc, html, dash_table

>>>>>>> 690c7b1af352ebe75093834392ebe5bac92e60ea

# Import package specific py_modules
import great_3d.genome_3D_integration as grtGI
import great_3d.base_calulations as greatCalc
import great_3d.plotly_graphs as greatPlot


# Command line arguments parsing
parser = argparse.ArgumentParser(description="3D transcription map, main program")
# Declare command line arguments
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-s", "--gene-starts",
                   type=argparse.FileType("r"),
                   help="Path to the file containing genes, chromosome names and start site genomic coordinates",
                   dest="geneStarts",
                   metavar="genes_starts")
group.add_argument("-c", "--gene-3Dcoords",
                   type=argparse.FileType("r"),
                   help="Path to the file containing the 3D coordinates of genes",
                   dest="genePos",
                   metavar="genes_positions")
parser.add_argument("-e", "--geneExpression-file",
                    type=argparse.FileType("r"),
                    required=True,
                    help="Path to the file containing the gene expression",
                    dest="geneExpr",
                    metavar="gene_expression_table")
parser.add_argument("-g", "--genome-coordinates",
                    type=argparse.FileType("r"),
                    required=True,
                    help="Path to the file containing the genome coordinates in 3D",
                    dest="genome",
                    metavar="genome_coords")
parser.add_argument("-u", "--user-genes",
                    type=argparse.FileType("r"),
                    help="Path to the file with the user genes of interest",
                    default=None,
                    dest="userGenes",
                    metavar="genes_interest")
parser.add_argument("-n", "--nb-genes",
                    help="Number of neighbouring genes. (DEFAULT = 10)",
                    type=int,
                    default=10,
                    dest="nGenes",
                    metavar="noGenes")
parser.add_argument("-m", "--correlation-method",
                    help="Define correlation method. (DEFAULT = 'pearson')",
                    type=str,
                    default="pearson",
                    dest="mCorr",
                    metavar="correlation_method")
parser.add_argument("-r", "--resolution",
                    help="The Hi-C file bins size (resolution). (DEFAULT = 5000)",
                    type=int,
                    default=5000,
                    dest="resolution",
                    metavar="hicResolution")
parser.add_argument("-t", "--title",
                    help="Title for the 3D plotly praph. (DEFAULT = '')",
                    type=str,
                    default="",
                    dest="title",
                    metavar="title")

# Generate the options-arguments object
args = parser.parse_args()
# Calculate if needed the gene 3D coordinates
if args.genePos:
    genePos = pd.read_table(args.genePos)
elif args.geneStarts:
    genePos = grtGI.compute_gene_coordinates(args.geneStarts, args.genome, args.resolution)
else:
    raise IOError("One of --gene-3Dcoords or --gene-starts arguments must be declared.")


def visualise_3D(traces):
    """Render figure layout for Plotly.
    - Args:
    - `traces`: The list of traces.
    - Return:
    - The Plotly figure.
    """
    # Set layout elements, size, margins, legend(s)
    layout = go.Layout(plot_bgcolor="#FFF",
                       autosize=False,
                       width=1600,
                       height=1200,
                       margin=dict(l=1, r=1, b=1, t=50),
                       legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.1),
                       modebar={"orientation": "h", "bgcolor": "salmon", "color": "white", "activecolor": "#9ED3CD"},
                       hoverlabel=dict(bgcolor='rgba(255,255,255,0.7)', font=dict(color='black')))
    # Construct the figure
    fig = go.Figure(data=traces, layout=layout)
    # Render axes invisible - cleaner graph.
    fig.update_scenes(xaxis_visible=False,
                      yaxis_visible=False,
                      zaxis_visible=False)
    return fig


# Calculations:
# Calculate the distance matrix
distanceMatrix = greatCalc.calculate_distance(genePos)
# Populate the dictionary of sorted distances.
sortedDict = greatCalc.sorting_distances(distanceMatrix)
# Compute a dictionnary of the sum of correlations between each gene and its neighbours.
sum_Corr = greatCalc.sum_correlation(sortedDict, args.geneExpr, args.nGenes, args.mCorr)

# Visualisations:
# Compute all visualisation tracks (traces)
traceGenome = greatPlot.visualise_genome_3D(args.genome)
traceGenes = greatPlot.visualise_genes(genePos)
# genePos, sum_Corr, args.userGenes)
# 3D visualization with Plotly
fig = visualise_3D([traceGenome, traceGenes])


# FIXME just to practive tables visualisation remove that later perhaps
args.geneExpr.seek(0)
with args.geneExpr as fh:
    df = pd.read_table(fh)


# Dash application
# TODO Enrich the Dash application with, controls (radio buttons, sliders, etc.), input files and progress bars!!!
app = Dash("GREAT3D")
app.layout = html.Div([
    html.H1(children='GREAT 3D transcriptome map'),
    html.Hr(),
    html.H3(children=args.title),
    dcc.Graph(id='dash_GREAT', figure=fig),
#    html.Hr(),
#    # Just to practice with tables visualisation
#    html.H3(children="Expression Data"),
#    dash_table.DataTable(data=df.to_dict('records'), page_size=10)
])

# TODO Enrich the Dash application with, controls (radio buttons, sliders, etc.), input files and progress bars!!!
# TODO here will go the callbacks

if __name__ == '__main__':
    app.run()  # (debug=True)
