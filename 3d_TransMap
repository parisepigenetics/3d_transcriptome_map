#!/usr/bin/env python3

"""
gene expression and position files management programm to create
genes Dctionnary file of the N closest Genes
"""

import argparse
import multiepigenomics_3d as me3d
import pandas as pd

parser = argparse.ArgumentParser(description="3D transcription map, main file")
# Positionnal argument containing the 3D coordinate of genes
parser.add_argument("-p", "--positions-file", type=argparse.FileType('r'), help='Path to the file containing the x, y, z coordinates of genes', dest="genePos", metavar="genes_position_file")
#parser.add_argument("-e", "--geneExpression-file", type=argparse.FileType('r'), help='path to the file containing the gene expression ', type=str, dest="geneExpr", metavar="gene_expression_file")
parser.add_argument("outfile", nargs='?', default="-", type=argparse.FileType('w'), metavar='output_file', help="Path to the outputfile of genes Dictionnary (or STDOUT).")
parser.add_argument("-n", "--nb-genes", help="Select the number of the closest genes --DEFAULT = 10", type=int, default=10, dest="nGenes", metavar="no_genes")

args = parser.parse_args()

# CALCULATION OF THE DISTANCE MATRIX
distanceMatrix = me3d.matrix_distance(args.genePos)

#CREATING THE DICTIONNARY WITH PARALLELIZATION
sortedDict = list.pop(me3d.parallelise_sorting_matrix(distanceMatrix))


# TODO: 1. Get the gene expression matirx.
#       2. For each of the n_genes get the gene expression and put them in a data frame. (for paralelisation, take the list of keys form the dict, split it is ncpus chunks and paralelise the process.)
#       3.  For each of the rows in the above data frame (i.e. gene_names as index) you compute the sum of correlations of the first element with all the rests. To paralelise that, follow the same way we did in the parallelise_sorting_matrix.


gene_expression = pd.read_csv('test_GE_Dist_Miara.tab', sep='\t')

''' PRINTING THE EXPRESSION OF the N CLOSEST
GENES for EACH GENES ??? SEARCHING A WAY TO PUT INTO A DATA FRAME
'''
dico_N_closest = {}
for genes_name in sortedDict :
    closest_genes = list(pd.DataFrame(sortedDict[genes_name][0:5]).index)
    dico_N_closest[genes_name] = list(closest_genes) # => donne la liste des N_closest genes
    #dico_N_closest[genes_name] = gene_expression.values[gene_expression.index == closest_genes]

for gene in dico_N_closest :
    print(gene)
    for i in dico_N_closest[gene] :
        #print('{} = {}\n'.format(i,gene_expression.values[gene_expression.index == i]))
        print(gene_expression.values[gene_expression.index == i],'\n')
