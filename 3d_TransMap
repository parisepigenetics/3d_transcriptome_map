#!/usr/bin/env python3

"""Gene expression and position files management programm to create
genes Dctionnary file of the N closest Genes
""" # TODO the program is not doing that, but it is OK for the moment. (to improve the description later).

import argparse
import pandas as pd

import multiepigenomics_3d as me3d

import sys
import pprint

parser = argparse.ArgumentParser(description="3D transcription map, main program.")
# Positionnal argument containing the 3D coordinate of genes
parser.add_argument("-p", "--positions-file", type=argparse.FileType('r'), help='Path to the file containing the x, y, z coordinates of genes', dest="genePos", metavar="genes_position_file")
parser.add_argument("-e", "--geneExpression-file", type=argparse.FileType('r'), help='path to the file containing the gene expression ', dest="geneExpr", metavar="gene_expression_file")
parser.add_argument("outfile", nargs='?', default="-", type=argparse.FileType('w'), metavar='output_file', help="Path to the outputfile of genes Dictionnary (or STDOUT).")
parser.add_argument("-n", "--nb-genes", help="Select the number of the closest genes --DEFAULT = 10", type=int, default=10, dest="nGenes", metavar="noGenes")
parser.add_argument("-c", "--method-correlation", help="Select the methode of correlation --DEFAULT = 'pearson'", type=str, default='pearson', dest="mCorr", metavar="methode_correlation")
args = parser.parse_args()

# Calculate the distance matrix
distanceMatrix = me3d.calculate_distance(args.genePos)

# Populate the dictionary of sorted distances.
sortedDict = me3d.sorting_distances(distanceMatrix)

#sortedDict = me3d.sorting_dists_parallel(distanceMatrix)
# NOTE: The paralelised code does not work faster and it does freeze the machine for large genomes.

# Compute a dictionnary of the sum of correlations between each gene and the others.
sum_Corr = me3d.sum_correlation(sortedDict, args.geneExpr, args.nGenes , args.mCorr)

#pprint.pprint(sum_Corr)

# 3D visualization_3D
# Plotly
me3d.visualization_3D_plotly(args.genePos , sum_Corr)
# Mathplotlib
#me3d.visualization_3D_mtp(args.genePos , sum_Corr)


# The parrallelization is not working yet
#sum_Corr_mp = me3d.sumCor_mp(sortedDict, args.geneExpr, args.nGenes)
#print(sum_Corr_mp)

# TODO: 1. FOLLOW the ToDos in the library file.
#       2. Start the 3D visualisation with plotly!
